server:
  rootPath: /api
  applicationConnectors:
    - type: http
      port: 8080
      maxRequestHeaderSize: 16KiB

  gzip:
    bufferSize: 8KiB
    enabled: true

  requestLog:
    appenders:
      - type: console

logging:
  level: INFO
  appenders:
    - type: console
  loggers:
    "org.reflections.Reflections": ERROR
    "com.wire.bots.logger": ${LOG_LEVEL:-INFO}

swagger:
  # make sure that this settings is the same as "server.rootPath"
  uriPrefix: /api
  title: Roman Swagger
  description: Roman - Wire Bots Proxy
  contactEmail: dejan@wire.com
  license: GPLv3
  version: 1.17.0
  resourcePackage: com.wire.bots.roman.resources
  schemes:
    - https
    - http

jerseyClient:
  timeout: 40s
  connectionTimeout: 40s
  connectionRequestTimeout: 40s
  keepAlive: 0ms
  retries: 3
  userAgent: roman
  tls:
    protocol: TLSv1.2
    provider: SunJSSE
    supportedProtocols:
      - TLSv1.1
      - TLSv1.2

database:
  driverClass: org.postgresql.Driver
  user: roman
  password: roman
  url: jdbc:postgresql://localhost:5432/roman

token: dummy
# used to sign JWT
key: ${APP_KEY:-TcZA2Kq4GaOcIbQuOvasrw34321cZAfLW4Ga54fsds43hUuOdcdm42}
# the public URL of the Roman instance, should end with "/api" as all Roman endpoints
# are served starting with /api
domain: http://localhost:8080/api
# URL of the Wire Backend
apiHost: https://staging-nginz-https.zinfra.io/v4

# TLS public key of "domain" in base64 format - used to pin certificates in Wire backend
# for the bot
romanPubKeyBase64: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA3xtHqyZPlb0lxlnP0rNAJVmAjB1Tenl11brkkKihcJNRAYrnrT/6sPX4u2lVn/aPncUTjN8omL47MBct7qYV1VY4a5beOyNiVL0ZjZMuh07aL9Z2A4cu67tKZrCoGttn3jpSVlqoOtwEgW+TpgpmKojcRC4DDXEZTEvRoi0RLzAyWCH/8hwWzXR7J082zmn0Ur211QVbOJN/62PAIWyjl5bLglp00AY5OnBHgRNwwRkBJIJLwgNm8u9+0ZplqmMGd3C/QFNngCOeRvFe+5g4qfO4/FOlbkM2kYFAi5KUowfG7cdMQELI+fe4v7yNsgrbMKhnIiLtDIU4wiQIRjbrZwIDAQAB

# optional enabling of CORS - in format a.domain.com,another.domain.com
allowedCors: ${ALLOWED_CORS}